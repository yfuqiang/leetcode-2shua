class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        vector<int> visited(nums.size());
        dfs(nums,visited,{});
        return res;
    }

    void dfs(vector<int>& nums,vector<int> visited,vector<int> temp)
    {
        //unordered_set<int> s;
        if(temp.size()==nums.size())
        {
            res.push_back(temp);
            return;
        }
        int i;
        for(i=0;i<nums.size();i++)
        {
            //if(s.find(nums[i])!=s.end())
           // continue;
            if(visited[i]==1)
            continue;
            if(i>0&&nums[i]==nums[i-1]&&visited[i-1]==0)
            continue;
            
            //s.insert(nums[i]);
            visited[i]=1;
            temp.push_back(nums[i]);
            dfs(nums,visited,temp);
            temp.pop_back();
            visited[i]=0;
        }
        return;
    }
    vector<vector<int>> res;
};
