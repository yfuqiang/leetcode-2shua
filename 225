class MyStack {
public:
    /** Initialize your data structure here. */
    MyStack() {
        flag=1;
    }
    
    /** Push element x onto stack. */
    void push(int x) {
        if(flag)
        q1.push(x);
        else
        q2.push(x);
    }
    
    /** Removes the element on top of the stack and returns that element. */
    int pop() {
        int res;
        if(flag)
        {
            while(q1.size()!=1)
            {
                int temp=q1.front();
                q1.pop();
                q2.push(temp);
            }
             res=q1.front();
            q1.pop();
            flag=0;
        }
        else
        {
            while(q2.size()!=1)
            {
                int temp=q2.front();
                q2.pop();
                q1.push(temp);
            }
            res=q2.front();
            q2.pop();
            flag=1;
        }
        return res;
    }
    
    /** Get the top element. */
    int top() {
        int res;
        if(flag)
        {
            while(q1.size()!=1)
            {
                int temp=q1.front();
                q1.pop();
                q2.push(temp);
            }
             res=q1.front();
            q1.pop();
            q2.push(res);
            flag=0;
        }
        else
        {
            while(q2.size()!=1)
            {
                int temp=q2.front();
                q2.pop();
                q1.push(temp);
            }
            res=q2.front();
            q2.pop();
            q1.push(res);
            flag=1;
        }
        return res;
    }
    
    /** Returns whether the stack is empty. */
    bool empty() {
        if(flag)
        return q1.empty();
        else
        return q2.empty();
    }
    queue<int> q1;
    queue<int> q2;
    int flag;
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack* obj = new MyStack();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->top();
 * bool param_4 = obj->empty();
 */
