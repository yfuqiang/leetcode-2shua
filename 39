class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());
        dfs(candidates,0,target,0,{});
        return res;
    }
    void dfs(vector<int>& candidates,int begin,int target,int sum,vector<int> temp)
    {
        if(sum==target)
        {
            res.push_back(temp);
            return;
        }
        if(sum>target)
        return;
        int i;
        for(i=begin;i<candidates.size();i++)
        {
            if(sum+candidates[i]>target)
            break;
            sum+=candidates[i];
            temp.push_back(candidates[i]);
            dfs(candidates,i,target,sum,temp);
            temp.pop_back();
            sum-=candidates[i];
        }

        return;
    }
    vector<vector<int>> res;
};
