class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
        vector<int> indegree(n);
        vector<vector<int>> graph(n);
        if(n==1)
        return {0};
        if(n==2)
        return {0,1};
        queue<int> q;
        int i;
        for(auto c:edges)
        {
            graph[c[0]].push_back(c[1]);
            graph[c[1]].push_back(c[0]);
            indegree[c[0]]++;
            indegree[c[1]]++;
        } 
        for(i=0;i<indegree.size();i++)
        {
            if(indegree[i]==1)
                {q.push(i);
               // indegree[i]=0;
               }
        }
        while(n>2)
        {
            int count=q.size();
            int k=count;
            while(count>0)
            {
                int s=q.front();
                q.pop();
                indegree[s]--;

                for(i=0;i<graph[s].size();i++)
                {
                    
                    
                    if(indegree[graph[s][i]]!=0)
                    {
                        indegree[graph[s][i]]--;
                        if(indegree[graph[s][i]]==1)
                       { q.push(graph[s][i]);
                        }
                    }
                }
                count--;
            }
            n-=k;
        }
        vector<int> res;
        while(q.empty()!=1)
        {
            res.push_back(q.front());
            q.pop();
        }
         //vector<int> res;
        return res;
    }
};
