/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *   public:
 *     // Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool isInteger() const;
 *
 *     // Return the single integer that this NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     int getInteger() const;
 *
 *     // Return the nested list that this NestedInteger holds, if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     const vector<NestedInteger> &getList() const;
 * };
 */

class NestedIterator {
public:
    NestedIterator(vector<NestedInteger> &nestedList) {
        dfsaa(nestedList);
    }
    void dfsaa(vector<NestedInteger> nestedList)
    {
        int j;
        for(j=0;j<nestedList.size();j++)
        {
            NestedInteger n= nestedList[j];
        if(n.isInteger()==1)
         {res.push_back(n.getInteger());
        
        }
        else
        {
            vector<NestedInteger> k=n.getList();
            dfsaa(k);
        }
        }
    }

    void dfs(NestedInteger n)
    {
        
        

    }
    
    int next() {
        return res[i++];
    }
    
    bool hasNext() {
        if(i==res.size())
        return false;
        return true;
    }
    vector<int> res;
    int i=0;
};

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i(nestedList);
 * while (i.hasNext()) cout << i.next();
 */
