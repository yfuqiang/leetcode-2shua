class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        vector<vector<int>> visited(board.size(),vector<int> (board[0].size()));
        int i,j;
        for(i=0;i<board.size();i++)
        {
            for(j=0;j<board[i].size();j++)
            {
                
                visited[i][j]=1;
                 if(dfs(board,visited,word,i,j,0))
                    return true;
                    visited[i][j]=0;
                
            }
        }
        return false;
    }
    bool dfs(vector<vector<char>>& board,vector<vector<int>>& visited,string word,int i,int j,int begin)
    {
        if(begin==word.size()-1&&board[i][j]==word[begin])
        return true;
        if(board[i][j]!=word[begin])
        return false;

        int i1,j1;
        for(int w=0;w<4;w++)
        {
            i1=i+p[w];
            j1=j+q[w];
            if(i1<0||i1>=board.size()||j1<0||j1>=board[0].size())
            continue;
            if(visited[i1][j1]==1)
            continue;
            visited[i1][j1]=1;
            if(dfs(board,visited,word,i1,j1,begin+1))
            return true;
            visited[i1][j1]=0;
        }
        return false;
    }
    int p[4]={-1,1,0,0};
    int q[4]={0,0,-1,1};
};
