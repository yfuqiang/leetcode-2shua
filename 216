class Solution {
public:
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<int> nums{1,2,3,4,5,6,7,8,9};
        dfs(nums,k,n,0,0,{});
        return res;
    }
    void dfs(vector<int>& nums,int k,int n,int sum,int begin,vector<int> temp)
    {
        if(temp.size()==k&&sum==n)
        {
            res.push_back(temp);
            return;
        }
        if(temp.size()==k&&sum!=n)
        return;
        if(begin==nums.size())
        return;
        if(nums[begin]+sum>n)
        return;
        int i;
        for(i=begin;i<nums.size();i++)
        {
            temp.push_back(nums[i]);
            dfs(nums,k,n,sum+nums[i],i+1,temp);
            temp.pop_back();
        }
        return;
    }
    vector<vector<int>> res;
};
